<configuration>
     <system.webServer>
          <webSocket enabled="false" />
          <handlers>
               <!-- indicates that the app.js file is a node.js application to be handled by the iisnode module -->
               <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
          </handlers>
          <rewrite>
               <rules>

                    <!-- Don't interfere with requests for node-inspector debugging -->
                    <rule name="NodeInspector" patternSyntax="ECMAScript" stopProcessing="true">
                        <match url="^server.js\/debug[\/]?" />
                    </rule>

                    <!-- First we consider whether the incoming URL matches a physical file in the /public folder -->
                    <rule name="StaticContent">
                         <action type="Rewrite" url="public{REQUEST_URI}"/>
                    </rule>

                    <!-- All other URLs are mapped to the Node.js application entry point -->
                    <rule name="DynamicContent">
                         <conditions>
                              <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                         </conditions>
                         <action type="Rewrite" url="server.js"/>
                    </rule>

               </rules>
          </rewrite>
          <!-- Make sure error responses are left untouched -->
          <httpErrors existingResponse="PassThrough" />
          <!-- You can control how Node is hosted within IIS using the following options -->
        <!--<iisnode watchedFiles="*.js;node_modules\*;routes\*.js;views\*.jade"/>-->
        <staticContent>
          <mimeMap fileExtension=".gltf" mimeType="model/gltf+json" />
          <mimeMap fileExtension=".bin" mimeType="application/octet-stream" />
        </staticContent>
     </system.webServer>
</configuration>  